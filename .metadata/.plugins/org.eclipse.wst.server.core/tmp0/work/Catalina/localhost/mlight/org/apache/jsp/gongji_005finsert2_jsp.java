/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-20 02:37:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.sql.*;
import java.io.*;
import service.*;
import domain.*;
import java.util.Date;
import java.text.SimpleDateFormat;

public final class gongji_005finsert2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("service");
    _jspx_imports_packages.add("domain");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"user-scalable=no, width=device-width\" />\r\n");
      out.write("<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\r\n");
      out.write("<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\r\n");
      out.write("<meta http-equiv=\"Cache-Control\" content=\"no-cache\" />\r\n");
      out.write("<meta http-equiv=\"Expires\" content=\"0\" />\r\n");
      out.write("<meta http-equiv=\"Pragma\" content=\"no-cache\" />\r\n");
      out.write("<script src=\"./static/js/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js\"></script>\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("\t<link href=\"https://fonts.googleapis.com/css2?family=Cinzel&family=Noto+Serif+KR:wght@200&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<!-- 부트스트랩 -->\r\n");
      out.write("<!-- 섬머노트 -->\r\n");
      out.write("<link href=\"./static/css/summernote/summernote-bs4.css\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<script src=\"./static/js/summernote/summernote-bs4.js\"></script>\r\n");
      out.write("<script src=\"./static/js/summernote/lang/summernote-ko-KR.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction sendFile(file, editor) {\r\n");
      out.write("\t\t// 파일 전송을 위한 폼생성\r\n");
      out.write("\t\tdata = new FormData();\r\n");
      out.write("\t\tdata.append(\"file\", file);\r\n");
      out.write("\t\t$.ajax({ // ajax를 통해 파일 업로드 처리\r\n");
      out.write("\t\t\tdata : data,\r\n");
      out.write("\t\t\ttype : \"POST\",\r\n");
      out.write("\t\t\turl : \"./upload\",\r\n");
      out.write("\t\t\tcache : false,\r\n");
      out.write("\t\t\tcontentType : false,\r\n");
      out.write("\t\t\tprocessData : false,\r\n");
      out.write("\t\t\tsuccess : function(data) { // 처리가 성공할 경우\r\n");
      out.write("\t\t\t\t// 에디터에 이미지 출력\r\n");
      out.write("\t\t\t\t$(editor).summernote('insertImage', data.url);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t//여기 아래 부분\r\n");
      out.write("\t\t$('#summernote').summernote({\r\n");
      out.write("\t\t\tminHeight : 100, // 최소 높이\r\n");
      out.write("\t\t\tmaxHeight : 200, // 최대 높이\r\n");
      out.write("\t\t\twidth : 270,\r\n");
      out.write("\t\t\tfocus : true, // 에디터 로딩후 포커스를 맞출지 여부\r\n");
      out.write("\t\t\tlang : \"ko-KR\", // 한글 설정\r\n");
      out.write("\t\t\t// 이미지를 업로드할 경우 이벤트를 발생\r\n");
      out.write("\t\t\tcallbacks : {\r\n");
      out.write("\t\t\tonImageUpload : function(files) {\r\n");
      out.write("\t\t\t\tsendFile(files[0], this);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("<title></title>\r\n");
      out.write("</head>\r\n");
      out.write("<body BACKGROUND=\"./image/bg.png\">\r\n");
      out.write("\t<center>\r\n");
      out.write("\t<h2 style=\"font-family: 'Cinzel', serif;\">Review</h2>\r\n");
      out.write("\t\t");

			SimpleDateFormat mSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		// 심플데이트포맷으로 날짜 형태 지정 
		Date currentTime = new Date(); // 현재 날짜 불러오기
		String mTime = mSimpleDateFormat.format(currentTime); // 포맷씌워서 저장
		
      out.write("\r\n");
      out.write("\t\t<form method=post name=\"form\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t<table class=\"table table-bordered\" style=\"width:300px;\" border=1 cellspacing=0 cellpadding=5>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><b>번호</b></td>\r\n");
      out.write("\t\t\t\t\t<td>신규(insert)</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><b>제목</b></td>\r\n");
      out.write("\t\t\t\t\t<td><input type=text name=title size=28 maxlength=28></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><b>일자</b></td>\r\n");
      out.write("\t\t\t\t\t<!-- 계산한 오늘 날짜를 삽입 -->\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(mTime);
      out.write("<input type=hidden name=date value=");
      out.print(mTime);
      out.write("></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><b>내용</b></td>\r\n");
      out.write("\t\t\t\t\t<td><textarea name=content id=\"summernote\"></textarea></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><b>파일</b></td>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"file\" name=\"filename\"></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><b>이미지</b></td>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"file\" name=\"imagename\"></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t<table width=320>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td width=320></td>\r\n");
      out.write("\t\t\t\t\t<td><button type=button class=\"btn btn-default\"\r\n");
      out.write("\t\t\t\t\t\t\tOnClick=\"location.href='gongji_list2.jsp'\">취소</button></td>\r\n");
      out.write("\t\t\t\t\t<!-- 취소창으로 -->\r\n");
      out.write("\t\t\t\t\t<td><button type=submit class=\"btn btn-default\"\r\n");
      out.write("\t\t\t\t\t\t\tOnClick=\"javascript: form.action='./gongji_write2.jsp';\">쓰기</button></td>\r\n");
      out.write("\t\t\t\t\t<!-- 쓰기창으로 -->\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
